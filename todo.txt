# todo



## First to look

1. add intellisense comments

somewhat done.


1. Master Detail Queries


1. Read records for generating record struct?

2. to dict, from dict

3. validate method

4. pydantic methods look.

5. Entity Framework methods



## Tests

1. Create looping script which will check following configurations

- UseSchemaNameInNamespaces
- UseSchemaNameInSqlQueries
- UseSchemaNameInFolders    
- UseQuotesInQueries
- UseGlobalUsings
- UseFileScopedNamespace


2. Paging tests


7. column --> expected .net type
Need to create my own example database for these examples.

8. create dotnet/nuget packages
https://learn.microsoft.com/en-us/nuget/quickstart/create-and-publish-a-package-using-the-dotnet-cli

github secrets and other should be looked.
PackageId and version how to automate??

  <PropertyGroup>
    <PackageId>Karkas.Core.DataUtil.2024.09.22</PackageId>
    <Version>2024.09.22</Version>
    <Authors>Atilla Özgür</Authors>
    <Company>Karkas</Company>
  </PropertyGroup>



## Bugs

## Improvements and Nice to Have

1. Help documentation generation from /// comments

2. add [JsonPropertyName("XXX")] to code generation

JsonNamingPolicy includes new naming policies for snake_case (with an underscore) 





6. Refactoring methods to English Only Names

7. Add configuration method which initializes from configuration files (app.config ...)

8. Read logging and fix it

9. Later check multiple .net SDK versions
For now, we work with .net6
    <TargetFrameworks>net6.0;net8.0</TargetFrameworks>
https://learn.microsoft.com/en-us/nuget/create-packages/multiple-target-frameworks-project-file


10. https://learn.microsoft.com/en-us/nuget/create-packages/multiple-target-frameworks-project-file
think about multiple version support

11. change logging
https://learn.microsoft.com/en-us/dotnet/core/extensions/logger-message-generator
https://learn.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-7.0

12. For oracle, force decimal to int,long


## Documentation and Examples

1. give examples for dependency injection

2. use mermaid as markdown to create some diagrams
I have started doing it.
I need to improve documentation.
https://mermaid-js.github.io/mermaid/


## Code Review

1. Nullable compile warnings
    <Nullable>enable</Nullable>
    <Nullable>disable</Nullable>
https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings


2. Karkas.Core.Data vs Karkas.Core.DataUtil ???
Should I fix the namespace?


4. CommandLineParser is good one.
https://github.com/commandlineparser/commandline
https://github.com/commandlineparser/commandline/wiki/Getting-Started
https://medium.com/@eduardosilva_94960/mastering-command-line-parsing-in-net-core-with-commandlineparser-c20721100359

## Later

Dockerfile enhancements

fork and give a pull request, need to sign my commits. Do it later
https://github.com/gvenzl/oci-oracle-xe/blob/main/examples/dkr-create-oracle-xe-server



## Decisions

1. Due to Oracle, I updated QueryHelper
It generates quoted string now.
Should I make this one customizable so that it could be turned off and on.



## sample databases

- https://github.com/lerocha/chinook-database
- https://github.com/jpwhite3/northwind-SQLite3/
- https://github.com/bradleygrant/sakila-sqlite3
